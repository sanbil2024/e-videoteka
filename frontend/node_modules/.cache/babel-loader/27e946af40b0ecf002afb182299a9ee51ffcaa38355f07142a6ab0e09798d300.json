{"ast":null,"code":"import React from 'react';\n\n// Utility function to calculate recommendations based on user's watch history and preferences\nexport const getRecommendedMovies = (movies, userHistory = [], userFavorites = []) => {\n  if (!movies || movies.length === 0) {\n    return [];\n  }\n\n  // If user has no history or favorites, return top rated movies\n  if (userHistory.length === 0 && userFavorites.length === 0) {\n    return movies.sort((a, b) => b.rating - a.rating).slice(0, 6);\n  }\n\n  // Get genres from user's history and favorites\n  const userGenres = new Map();\n\n  // Process history\n  userHistory.forEach(movieId => {\n    const movie = movies.find(m => m._id === movieId);\n    if (movie) {\n      movie.genre.forEach(genre => {\n        userGenres.set(genre, (userGenres.get(genre) || 0) + 1);\n      });\n    }\n  });\n\n  // Process favorites (with higher weight)\n  userFavorites.forEach(movieId => {\n    const movie = movies.find(m => m._id === movieId);\n    if (movie) {\n      movie.genre.forEach(genre => {\n        userGenres.set(genre, (userGenres.get(genre) || 0) + 2);\n      });\n    }\n  });\n\n  // Sort genres by frequency\n  const sortedGenres = [...userGenres.entries()].sort((a, b) => b[1] - a[1]).map(entry => entry[0]);\n\n  // Filter out movies that user has already watched or favorited\n  const unwatchedMovies = movies.filter(movie => !userHistory.includes(movie._id) && !userFavorites.includes(movie._id));\n\n  // Score each movie based on genre match\n  const scoredMovies = unwatchedMovies.map(movie => {\n    let score = 0;\n\n    // Add points for each matching genre, weighted by genre preference\n    movie.genre.forEach(genre => {\n      const genreIndex = sortedGenres.indexOf(genre);\n      if (genreIndex !== -1) {\n        // More points for higher ranked genres\n        score += sortedGenres.length - genreIndex;\n      }\n    });\n\n    // Add points for rating\n    score += movie.rating / 2;\n    return {\n      ...movie,\n      score\n    };\n  });\n\n  // Sort by score and return top recommendations\n  return scoredMovies.sort((a, b) => b.score - a.score).slice(0, 6);\n};\n\n// Utility function to format date\nexport const formatDate = date => {\n  const d = new Date(date);\n  return d.toLocaleDateString('hr-HR');\n};\n\n// Utility function to calculate total price\nexport const calculateTotal = items => {\n  return items.reduce((total, item) => total + item.price * item.quantity, 0);\n};\n\n// Utility function to filter movies by search term\nexport const filterMoviesBySearchTerm = (movies, searchTerm) => {\n  if (!searchTerm) return movies;\n  const term = searchTerm.toLowerCase();\n  return movies.filter(movie => movie.title.toLowerCase().includes(term) || movie.director.toLowerCase().includes(term) || movie.genre.some(g => g.toLowerCase().includes(term)) || movie.actors.some(a => a.toLowerCase().includes(term)));\n};\n\n// Utility function to filter movies by genre\nexport const filterMoviesByGenre = (movies, genre) => {\n  if (!genre) return movies;\n  return movies.filter(movie => movie.genre.includes(genre));\n};\n\n// Utility function to sort movies\nexport const sortMovies = (movies, sortBy) => {\n  if (!sortBy) return movies;\n  const sortedMovies = [...movies];\n  switch (sortBy) {\n    case 'title':\n      return sortedMovies.sort((a, b) => a.title.localeCompare(b.title));\n    case 'year':\n      return sortedMovies.sort((a, b) => b.year - a.year);\n    case 'rating':\n      return sortedMovies.sort((a, b) => b.rating - a.rating);\n    case 'price':\n      return sortedMovies.sort((a, b) => a.price - b.price);\n    default:\n      return sortedMovies;\n  }\n};","map":{"version":3,"names":["React","getRecommendedMovies","movies","userHistory","userFavorites","length","sort","a","b","rating","slice","userGenres","Map","forEach","movieId","movie","find","m","_id","genre","set","get","sortedGenres","entries","map","entry","unwatchedMovies","filter","includes","scoredMovies","score","genreIndex","indexOf","formatDate","date","d","Date","toLocaleDateString","calculateTotal","items","reduce","total","item","price","quantity","filterMoviesBySearchTerm","searchTerm","term","toLowerCase","title","director","some","g","actors","filterMoviesByGenre","sortMovies","sortBy","sortedMovies","localeCompare","year"],"sources":["C:/Users/Sandro/Desktop/Skriptni/e-videoteka/frontend/src/utils/movieUtils.js"],"sourcesContent":["import React from 'react';\n\n// Utility function to calculate recommendations based on user's watch history and preferences\nexport const getRecommendedMovies = (movies, userHistory = [], userFavorites = []) => {\n  if (!movies || movies.length === 0) {\n    return [];\n  }\n\n  // If user has no history or favorites, return top rated movies\n  if (userHistory.length === 0 && userFavorites.length === 0) {\n    return movies\n      .sort((a, b) => b.rating - a.rating)\n      .slice(0, 6);\n  }\n\n  // Get genres from user's history and favorites\n  const userGenres = new Map();\n  \n  // Process history\n  userHistory.forEach(movieId => {\n    const movie = movies.find(m => m._id === movieId);\n    if (movie) {\n      movie.genre.forEach(genre => {\n        userGenres.set(genre, (userGenres.get(genre) || 0) + 1);\n      });\n    }\n  });\n  \n  // Process favorites (with higher weight)\n  userFavorites.forEach(movieId => {\n    const movie = movies.find(m => m._id === movieId);\n    if (movie) {\n      movie.genre.forEach(genre => {\n        userGenres.set(genre, (userGenres.get(genre) || 0) + 2);\n      });\n    }\n  });\n  \n  // Sort genres by frequency\n  const sortedGenres = [...userGenres.entries()]\n    .sort((a, b) => b[1] - a[1])\n    .map(entry => entry[0]);\n  \n  // Filter out movies that user has already watched or favorited\n  const unwatchedMovies = movies.filter(\n    movie => !userHistory.includes(movie._id) && !userFavorites.includes(movie._id)\n  );\n  \n  // Score each movie based on genre match\n  const scoredMovies = unwatchedMovies.map(movie => {\n    let score = 0;\n    \n    // Add points for each matching genre, weighted by genre preference\n    movie.genre.forEach(genre => {\n      const genreIndex = sortedGenres.indexOf(genre);\n      if (genreIndex !== -1) {\n        // More points for higher ranked genres\n        score += (sortedGenres.length - genreIndex);\n      }\n    });\n    \n    // Add points for rating\n    score += movie.rating / 2;\n    \n    return { ...movie, score };\n  });\n  \n  // Sort by score and return top recommendations\n  return scoredMovies\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 6);\n};\n\n// Utility function to format date\nexport const formatDate = (date) => {\n  const d = new Date(date);\n  return d.toLocaleDateString('hr-HR');\n};\n\n// Utility function to calculate total price\nexport const calculateTotal = (items) => {\n  return items.reduce((total, item) => total + item.price * item.quantity, 0);\n};\n\n// Utility function to filter movies by search term\nexport const filterMoviesBySearchTerm = (movies, searchTerm) => {\n  if (!searchTerm) return movies;\n  \n  const term = searchTerm.toLowerCase();\n  return movies.filter(\n    movie => \n      movie.title.toLowerCase().includes(term) ||\n      movie.director.toLowerCase().includes(term) ||\n      movie.genre.some(g => g.toLowerCase().includes(term)) ||\n      movie.actors.some(a => a.toLowerCase().includes(term))\n  );\n};\n\n// Utility function to filter movies by genre\nexport const filterMoviesByGenre = (movies, genre) => {\n  if (!genre) return movies;\n  \n  return movies.filter(movie => movie.genre.includes(genre));\n};\n\n// Utility function to sort movies\nexport const sortMovies = (movies, sortBy) => {\n  if (!sortBy) return movies;\n  \n  const sortedMovies = [...movies];\n  \n  switch (sortBy) {\n    case 'title':\n      return sortedMovies.sort((a, b) => a.title.localeCompare(b.title));\n    case 'year':\n      return sortedMovies.sort((a, b) => b.year - a.year);\n    case 'rating':\n      return sortedMovies.sort((a, b) => b.rating - a.rating);\n    case 'price':\n      return sortedMovies.sort((a, b) => a.price - b.price);\n    default:\n      return sortedMovies;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}